"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AuthController_1 = __importDefault(require("../app/controllers/AuthController"));
const SchoolAuthController_1 = __importDefault(require("../app/controllers/SchoolAuthController"));
const AttendanceController_1 = __importDefault(require("../app/controllers/AttendanceController"));
const JournalController_1 = __importDefault(require("../app/controllers/JournalController"));
const ExamController_1 = __importDefault(require("../app/controllers/ExamController"));
const auth_1 = __importDefault(require("../app/middlewares/auth"));
const roleAuth_1 = __importDefault(require("../app/middlewares/roleAuth"));
const HomeController_1 = __importDefault(require("../app/controllers/HomeController"));
const AssetController_1 = __importDefault(require("../app/controllers/AssetController"));
const hyper_express_1 = __importDefault(require("hyper-express"));
const Route = new hyper_express_1.default.Router();
Route.get("/", HomeController_1.default.index);
Route.get("/login", AuthController_1.default.loginPage);
Route.post("/login", SchoolAuthController_1.default.processLogin);
Route.get("/register", AuthController_1.default.registerPage);
Route.post("/register", SchoolAuthController_1.default.processRegister);
Route.post("/logout", AuthController_1.default.logout);
Route.get("/google/redirect", AuthController_1.default.redirect);
Route.get("/google/callback", AuthController_1.default.googleCallback);
Route.get("/forgot-password", AuthController_1.default.forgotPasswordPage);
Route.post("/forgot-password", AuthController_1.default.sendResetPassword);
Route.get("/reset-password/:id", AuthController_1.default.resetPasswordPage);
Route.post("/reset-password", AuthController_1.default.resetPassword);
Route.get("/dashboard/student", [auth_1.default, roleAuth_1.default.student()], SchoolAuthController_1.default.getDashboardData);
Route.get("/dashboard/teacher", [auth_1.default, roleAuth_1.default.teacher()], SchoolAuthController_1.default.getDashboardData);
Route.get("/dashboard/parent", [auth_1.default, roleAuth_1.default.parent()], SchoolAuthController_1.default.getDashboardData);
Route.get("/dashboard/admin", [auth_1.default, roleAuth_1.default.admin()], SchoolAuthController_1.default.getDashboardData);
Route.post("/api/attendance/generate-qr", [auth_1.default, roleAuth_1.default.teacher()], AttendanceController_1.default.generateQRCode);
Route.post("/api/attendance/scan", [auth_1.default, roleAuth_1.default.student()], AttendanceController_1.default.processScan);
Route.get("/api/attendance/class/:class_id", [auth_1.default, roleAuth_1.default.teacherOrAdmin()], AttendanceController_1.default.getClassAttendance);
Route.get("/api/attendance/student/:student_id", [auth_1.default], AttendanceController_1.default.getStudentAttendance);
Route.get("/api/attendance/stats/:student_id", [auth_1.default], AttendanceController_1.default.getAttendanceStats);
Route.post("/api/attendance/close/:session_id", [auth_1.default, roleAuth_1.default.teacher()], AttendanceController_1.default.closeSession);
Route.get("/journal/create", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.createPage);
Route.post("/journal", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.create);
Route.get("/journal/:journal_id/edit", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.editPage);
Route.put("/journal/:journal_id", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.update);
Route.post("/journal/:journal_id/upload", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.uploadMedia);
Route.get("/api/journal/teacher/:teacher_id", [auth_1.default], JournalController_1.default.getTeacherJournals);
Route.get("/api/journal/class/:class_id", [auth_1.default], JournalController_1.default.getClassJournals);
Route.post("/api/journal/:journal_id/publish", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.publish);
Route.delete("/api/journal/:journal_id", [auth_1.default, roleAuth_1.default.teacher()], JournalController_1.default.delete);
Route.get("/api/journal/search", [auth_1.default], JournalController_1.default.search);
Route.get("/exam/create", [auth_1.default, roleAuth_1.default.teacher()], ExamController_1.default.createPage);
Route.post("/exam/import-excel", [auth_1.default, roleAuth_1.default.teacher()], ExamController_1.default.importExcel);
Route.get("/exam/template", [auth_1.default, roleAuth_1.default.teacher()], ExamController_1.default.downloadTemplate);
Route.post("/exam/:exam_id/start", [auth_1.default, roleAuth_1.default.student()], ExamController_1.default.startAttempt);
Route.post("/exam/attempt/:attempt_id/answer", [auth_1.default, roleAuth_1.default.student()], ExamController_1.default.submitAnswer);
Route.post("/exam/attempt/:attempt_id/submit", [auth_1.default, roleAuth_1.default.student()], ExamController_1.default.submitExam);
Route.get("/exam/:exam_id/results", [auth_1.default, roleAuth_1.default.teacherOrAdmin()], ExamController_1.default.getResults);
Route.get("/api/exam/student/:student_id?", [auth_1.default], ExamController_1.default.getStudentExams);
Route.post("/api/exam/:exam_id/activate", [auth_1.default, roleAuth_1.default.teacher()], ExamController_1.default.activateExam);
Route.get("/api/exam/:exam_id", [auth_1.default], ExamController_1.default.getExamDetails);
Route.get("/api/exam/teacher/:teacher_id?", [auth_1.default], ExamController_1.default.getTeacherExams);
Route.get("/home", [auth_1.default], AuthController_1.default.homePage);
Route.get("/profile", [auth_1.default], AuthController_1.default.profilePage);
Route.post("/change-profile", [auth_1.default], AuthController_1.default.changeProfile);
Route.post("/change-password", [auth_1.default], AuthController_1.default.changePassword);
Route.delete("/users", [auth_1.default], AuthController_1.default.deleteUsers);
Route.get("/assets/:file", AssetController_1.default.distFolder);
Route.get("/*", AssetController_1.default.publicFolder);
exports.default = Route;
//# sourceMappingURL=web.js.map